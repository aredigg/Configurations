#!/usr/bin/env zsh

VERSION="1.11"
SKIPTIME="864000"
SPINNER_INTERVAL=0.4
SPINNER_PLAIN_INTERVAL=1
SPINNER_PID=0
VALID_INSTALL_COMMANDS=("install" "download" "print" "remove" "help")

# Set script start timestamp
SCRIPT_TIMESTAMP=$(date +%s)

# Colors
FANCY_COLOR_BEGIN="\033[38;2;35;38;52m\033[38;2;166;209;137;48;2;35;38;52m"
FANCY_COLOR_END="\033[0m\033[38;2;35;38;52m\033[0m"
FANCY_COLOR_POST="\033[0m\033[38;2;166;209;137;48;2;35;38;52m"
FANCY_COLOR_TIME="\033[0m\033[38;2;229;200;144;48;2;35;38;52m"
FANCY_COLOR_INFO_PRE="\033[38;2;255;255;255;48;2;41;44;60m\033[1m"
FANCY_COLOR_DONE_PRE="\033[38;2;64;160;43;48;2;41;44;60m\033[1m"
FANCY_COLOR_WARN_PRE="\033[38;2;229;200;144;48;2;41;44;60m\033[1m"
FANCY_COLOR_FAIL_PRE="\033[38;2;210;15;57;48;2;41;44;60m\033[1m"
FANCY_COLOR_SPIN_1="\033[38;2;64;160;43;48;2;35;38;52m"
FANCY_COLOR_SPIN_2="\033[38;2;48;120;32;48;2;35;38;52m"
FANCY_COLOR_SPIN_3="\033[38;2;32;80;21;48;2;35;38;52m"
FANCY_COLOR_SPIN_4="\033[38;2;16;40;10;48;2;35;38;52m"
FANCY_COLOR_SPIN_5="\033[38;2;0;0;0;48;2;35;38;52m"


################################################################################
# Script to install common build tools, and cli utilities
################################################################################
# ==============================================================================
# ©️ 2025 Are Digranes. All rights reserved
# ==============================================================================

# Help output
# ==============================================================================

output_help() {
    print -n "\
Usage: $ZSH_SCRIPT command [options]
Installs common build tools and general CLI utilities
Commands:
  install   Install all tools and utilities (default)
  download  Download and extract only
  print     Print a list of installed tools and utilities
  remove    Remove the tools and utilities
Options:
  --help    Show this help and exit
  --version Show the version
  --prefix= Install prefix
  --debug   Output information to debug the script
  --speak   Speak package and stages
  --plain   No fancy text
  --tool=   Use with remove to uninstall only one tool
$1"
}

# Auxilliary functions
# ==============================================================================
elapsed_time() {
    local elapsed=$(( $(date +%s) - $SCRIPT_TIMESTAMP ))
    local days=$(( elapsed / 86400 ))
    local hours=$(( (elapsed % 86400) / 3600 ))
    local minutes=$(( (elapsed % 3600) / 60 ))
    local seconds=$(( elapsed % 60 ))
    printf "%02d:%02d:%02d:%02d" $days $hours $minutes $seconds
}

print_status() {
    local local_time=$(elapsed_time)
    if [[ $DEBUG == ON ]]; then
        print "[$2]: ($local_time) $1 - $3"
    fi
    local status_color="$FANCY_COLOR_INFO_PRE"
    case $2 in
        INFO)
            if [[ $SPEAK == ON ]]; then say -v Samantha "$1, $3"; fi
            status_color="$FANCY_COLOR_INFO_PRE"
            ;;
        WARN)
            if [[ $SPEAK == ON ]]; then say -v Samantha "Warning: $1, $3"; fi
            status_color="$FANCY_COLOR_WARN_PRE"
            ;;
        DONE)
            if [[ $SPEAK == ON ]]; then say -v Samantha "$1 done."; fi
            status_color="$FANCY_COLOR_DONE_PRE"
            ;;
        FAIL)
            if [[ $SPEAK == ON ]]; then say -v Samantha "Error $3 exception, $1"; fi
            status_color="$FANCY_COLOR_FAIL_PRE"
            ;;
        *)
            if [[ $SPEAK == ON ]]; then say -v Samantha "Unknown state $2. $1, $3"; fi
            status_color="$FANCY_COLOR_FAIL_PRE"
            ;;
    esac
    if [[ $PLAIN_TEXT == ON ]]; then
        print -n "\n[$2]: ($local_time) $1 - $3 " > /dev/tty
    else
        printf "\033[2;5H$FANCY_COLOR_BEGIN %-21s $status_color %-21s $FANCY_COLOR_POST  $FANCY_COLOR_TIME ${local_time} $FANCY_COLOR_END\033[2;1H\n" "$1" "$3" > /dev/tty
    fi
}

sudo_check() {
    if ! sudo -Nnv 2>/dev/null; then
        sudo -K
        if [[ $SPEAK == ON ]]; then
            say -v Samantha "Please enter password for system install"
        fi
        if [[ $PLAIN_TEXT != ON ]]; then
            printf "\033[3;1H" > /dev/tty
        fi
        sudo -v -p "Please enter password for system install: "
        printf "\033[3;1H%-${COLUMNS}s\033[2;1H\n" " " > /dev/tty
    fi
}

uninstall_manifested() {
    local package=$1
    local manifest_file="$2"
    local uninstall_directories=()

    if [ -f "$manifest_file" ]; then
        print_status $package "WARN" "Uninstalling"

        while IFS= read -r uninstall_file; do
            if [ -f "$uninstall_file" ]; then
                print "Removing $uninstall_file"
                sudo_check
                sudo rm "$uninstall_file"
            fi
            uninstall_directories+=($(dirname "$uninstall_file"))
        done < "$manifest_file"

        uninstall_directories=($(printf "%s\n" "${uninstall_directories[@]}" | awk '!visited[$0]++' | awk '{ print length, $0 }' | sort -rn | cut -d' ' -f2-))

        for uninstall_directory in "${uninstall_directories[@]}"; do
            if [[ -d "$uninstall_directory" ]]; then
                print "Checking $uninstall_directory"
                sudo_check
                sudo find "$uninstall_directory" -type l ! -exec test -e {} \; -exec rm -f {} \;
                if [[ -z "$(ls -A "$uninstall_directory")" ]]; then
                    print "Removing $uninstall_directory"
                    sudo_check
                    sudo rm -rf "$uninstall_directory"
                fi
            fi
        done
        rm "$manifest_file"
    else
        print_status $package "WARN" "Not manifested"
    fi
}

check_activity() {
    last_activity=$(stat -f "%Dm" -t %s "$1")
    if [[ -z $last_activity ]]; then return 1; fi
    echo $(( $(date +%s) - last_activity ))
}

monitor_activity() {
    local spin=0
    while true; do
        local elapsed_time=$(check_activity "$1")
        if [[ $? ]]; then
            if (( elapsed_time < 1)); then
                if (( spin == 0 )); then
                    print -n "\033[2;52H$FANCY_COLOR_SPIN_1 ⏺ $FANCY_COLOR_TIME$(elapsed_time)\033[2;1H\n" > /dev/tty
                    spin=1
                else
                    print -n "\033[2;52H$FANCY_COLOR_SPIN_2 ⏺ $FANCY_COLOR_TIME$(elapsed_time)\033[2;1H\n" > /dev/tty
                    spin=0
                fi
            elif (( elapsed_time < 2)); then
                print -n "\033[2;52H$FANCY_COLOR_SPIN_2 ⏺ $FANCY_COLOR_TIME$(elapsed_time)\033[2;1H\n" > /dev/tty
            elif (( elapsed_time < 3)); then
                print -n "\033[2;52H$FANCY_COLOR_SPIN_3 ⏺ $FANCY_COLOR_TIME$(elapsed_time)\033[2;1H\n" > /dev/tty
            elif (( elapsed_time < 4)); then
                print -n "\033[2;52H$FANCY_COLOR_SPIN_4 ⏺ $FANCY_COLOR_TIME$(elapsed_time)\033[2;1H\n" > /dev/tty
            elif (( elapsed_time < 5)); then
                print -n "\033[2;52H$FANCY_COLOR_SPIN_5 ⏺ $FANCY_COLOR_TIME$(elapsed_time)\033[2;1H\n" > /dev/tty
            else
                print -n "\033[2;52H$FANCY_COLOR_SPIN_5 ⏺ $FANCY_COLOR_TIME$(elapsed_time)\033[2;1H\n" > /dev/tty
            fi
        else
            print -n "\033[2;52H$FANCY_COLOR_SPIN_5 ⏺ $FANCY_COLOR_TIME$(elapsed_time)\033[2;1H\n" > /dev/tty
        fi
        sleep $SPINNER_INTERVAL
    done
}

monitor_activity_plain() {
    while true; do
        local elapsed_time=$(check_activity "$1")
        if [[ $? ]]; then
            if (( elapsed_time < SPINNER_PLAIN_INTERVAL*2 )); then
                print -n "*" > /dev/tty
            fi
        fi
        sleep $SPINNER_PLAIN_INTERVAL
    done
}

spinner() {
    if [[ $1 == on ]]; then
        if [[ $PLAIN_TEXT == ON ]]; then
            monitor_activity_plain $INSTALL_LOG_OUT &
            SPINNER_PID=$!
        else
            monitor_activity $INSTALL_LOG_OUT &
            SPINNER_PID=$!
        fi
    else
        if (( SPINNER_PID > 0 )); then
            kill "$SPINNER_PID" 2>/dev/null
            SPINNER_PID=0
        fi
    fi
}

# Script setup
# ==============================================================================
setup() {
    # Evaluate arguments and assign to various variables
    INSTALL_PREFIX="/usr/local"
    INSTALL_SINGLE_TOOL=""
    DEBUG=OFF
    SPEAK=OFF
    PLAIN_TEXT=OFF
    local positional_args=()
    local unknown_args=()
    for arg in "$@"; do
        case "$arg" in
            --help)
                output_help
                exit 0
                ;;
            --version)
                print "$ZSH_SCRIPT $VERSION"
                exit 0
                ;;
            --prefix=*)
                INSTALL_PREFIX="${arg#*=}"
                ;;
            --tool=*)
                INSTALL_SINGLE_TOOL="${arg#*=}"
                ;;
            --debug)
                DEBUG=ON
                ;;
            --speak)
                SPEAK=ON
                ;;
            --plain)
                PLAIN_TEXT=ON
                ;;
            --*)
                unknown_args+=("$arg")
                ;;
            *)
                positional_args+=("$arg")
                ;;
        esac
    done
    INSTALL_COMMAND=${positional_args[1]:-"install"}
    if [[ " ${VALID_INSTALL_COMMANDS[@]} " != *" $INSTALL_COMMAND "* ]]; then
        output_help "ERROR: Unknown command $INSTALL_COMMAND\n"
        exit 0
    fi
    SDK_PATH="$(xcrun --show-sdk-path)"
    INSTALL_CERTS_DIRECTORY="$INSTALL_PREFIX/etc/ssl/certs"
    INSTALL_ROOT_CERTS="$INSTALL_CERTS_DIRECTORY/ca-certificates.pem"
    export PATH="${PATH:-}:${INSTALL_PREFIX}/bin"
    export SCRIPT_PYTHONPATH=$(dirname $(which python3))
    export MACOSX_DEPLOYMENT_TARGET=15.00
    print -- "Pos $positional_args"
    print -- "Unk $unknown_args"
    CONCURRENT_JOBS=$(("$(getconf _NPROCESSORS_ONLN)" + "$(echo "$(getconf _NPROCESSORS_ONLN) / 2" | bc)"))
    SWD="$PWD/.temp"
    MANIFEST_DIRECTORY="$SWD/manifests"
    SOURCES_DIRECTORY="$SWD/sources"
    BUILDS_DIRECTORY="$SWD/builds"
    LOGS_DIRECTORY="$SWD/logs"
    mkdir -p "$MANIFEST_DIRECTORY" "$SOURCES_DIRECTORY" "$BUILDS_DIRECTORY" "$LOGS_DIRECTORY"
    INSTALL_LOG_OUT="$LOGS_DIRECTORY/log_out.log"
    INSTALL_LOG_ERR="$LOGS_DIRECTORY/log_err.log"
    if [[ $PLAIN_TEXT == OFF ]]; then
        print "\033[2J\033[?25l\n"
    fi
    exec >"$INSTALL_LOG_OUT" 2>"$INSTALL_LOG_ERR"
    date '+%Y-%m-%d %H:%M:%S'
    trap 'script_trap "$?" "$LINENO" "$0" "$@"' ERR HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH INFO USR1 USR2 ZERR
}

script_trap() {
    local except_status=$1
    if (( $except_status == 0 )); then return 0; fi
    trap - ERR HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH INFO USR1 USR2 ZERR
    if (( SPINNER_PID > 0 )); then
        kill "$SPINNER_PID" 2>/dev/null
        SPINNER_PID=0
    fi
    local except_line=$2
    local except_function=$3
    local except_arguments=(${(f)${4}})
    local signal_identifier="$except_status"
    if (( except_status > 127 )); then
        signal_identifier="${(e)signals[$(( except_status - 127 ))]}"
    fi
    print "\033[4;1H\033[?25h\n" > /dev/tty
    # 1 should almost always be the package name
    print_status "${except_arguments[1]}" "FAIL" "$signal_identifier"
    print "Status    : $except_status"
    print "Line      : $except_line"
    print "Function  : $except_function"
    print "Arguments : $except_arguments[*]"
    exit $except_status
}

# Download functions
# ==============================================================================

download_git() {
    local package=$1
    local url=$2
    local branch=$3

    if [[ $INSTALL_COMMAND == "remove" ]]; then
        rm -rf "${SOURCES_DIRECTORY}/${package}"
        return
    fi

    if [[ ! -d "${SOURCES_DIRECTORY}/${package}" ]]; then
        print_status $package "INFO" "Cloning"
        git clone  --no-checkout "$url" "${SOURCES_DIRECTORY}/${package}"
        git -C "${SOURCES_DIRECTORY}/${package}" config --add remote.origin.fetch '^refs/heads/users/*'
        git -C "${SOURCES_DIRECTORY}/${package}" config --add remote.origin.fetch '^refs/heads/revert-*'
        git -C "${SOURCES_DIRECTORY}/${package}" checkout $branch
        git -C "${SOURCES_DIRECTORY}/${package}" submodule update --init
    else
        # !!! The script assumes that you don't use these temporary directories for development
        print_status $package "INFO" "Updating"
        git -C "${SOURCES_DIRECTORY}/${package}" checkout $branch
        git -C "${SOURCES_DIRECTORY}/${package}" reset --hard HEAD
        git -C "${SOURCES_DIRECTORY}/${package}" clean -xffd
        git -C "${SOURCES_DIRECTORY}/${package}" pull
    fi
}

download_svn() {
    local package=$1
    local url=$2

    if [[ $INSTALL_COMMAND == "remove" ]]; then
        rm -rf "${SOURCES_DIRECTORY}/${package}"
        return
    fi

    if [[ ! -d "${SOURCES_DIRECTORY}/${package}" ]]; then
        print_status $package "INFO" "Fetching"
        svn \
            --config-option=servers:global:ssl-trust-default-ca=yes \
            --config-option=servers:global:ssl-authority-files="$INSTALL_ROOT_CERTS" \
            checkout "$url" "$source_directory"
    else
        print_status $package "INFO" "Updating"
        cd "${SOURCES_DIRECTORY}/${package}"
        svn \
            --config-option=servers:global:ssl-trust-default-ca=yes \
            --config-option=servers:global:ssl-authority-files="$INSTALL_ROOT_CERTS" \
            update
    fi
}

download_https() {
# TODO check sig/hash
    local package=$1
    local url=$2
    local filename=$3
    local etag=${4:=YES}
    local strip=${5:=YES}

    if [[ $INSTALL_COMMAND == "remove" ]]; then
        if [[ -f "${SOURCES_DIRECTORY}/${filename}" ]]; then rm "${SOURCES_DIRECTORY}/${filename}"; fi
        if [[ -f "${SOURCES_DIRECTORY}/${package}" ]]; then rm "${SOURCES_DIRECTORY}/${package}"; fi
        if [[ -d "${SOURCES_DIRECTORY}/${package}" ]]; then rm -rf "${SOURCES_DIRECTORY}/${package}"; fi
        if [[ $etag == YES ]] && [[ -f "${MANIFEST_DIRECTORY}/${filename}.etag" ]]; then rm "${MANIFEST_DIRECTORY}/${filename}.etag"; fi
        return
    fi

    print_status $package "INFO" "Downloading"
    if [[ $etag == YES ]]; then
        curl -sL \
            --etag-compare "${MANIFEST_DIRECTORY}/${filename}.etag" \
            --etag-save "${MANIFEST_DIRECTORY}/${filename}.etag" \
            -o "${SOURCES_DIRECTORY}/${filename}" \
            "${url}${filename}"
    else
        curl -sL \
            -z "${SOURCES_DIRECTORY}/${filename}" \
            -o "${SOURCES_DIRECTORY}/${filename}" \
            "${url}${filename}"
    fi

    local compressed_mime_types=(
        "application/x-gzip"            # .gz
        "application/gzip"              # .gz
        "application/zip"               # .zip
        "application/x-bzip2"           # .bz2
        "application/x-xz"              # .xz
        "application/x-compress"        # .Z
        "application/x-tar"             # .tar
        "application/x-rar"             # .rar
        "application/x-7z-compressed"   # .7z
    )
    if [[ " ${compressed_mime_types[@]} " =~ " $(file --brief --mime-type "${SOURCES_DIRECTORY}/${filename}") " ]]; then
        if [[ ! -d "${SOURCES_DIRECTORY}/${package}" ]]; then
            mkdir -p "${SOURCES_DIRECTORY}/${package}"
        else
            print_status $package "INFO" "Cleaning"
            rm -rf "${SOURCES_DIRECTORY}/${package}"
            mkdir -p "${SOURCES_DIRECTORY}/${package}"
        fi
        print_status $package "INFO" "Extracting"
        if [[ $strip == YES ]]; then
            tar xf "${SOURCES_DIRECTORY}/${filename}" -C "${SOURCES_DIRECTORY}/${package}" --strip-components=1
        else
            tar xf "${SOURCES_DIRECTORY}/${filename}" -C "${SOURCES_DIRECTORY}/${package}"
        fi
    fi
}

download() {
    # package-name, command, url, filename/branch, etag (https), strip (https-extract)
    case "$2" in
        git)
            download_git "$1" "$3" "$4" "$5" "$6"
            ;;
        svn)
            download_svn "$1" "$3" "$4" "$5" "$6"
            ;;
        https)
            download_https "$1" "$3" "$4" "$5" "$6"
            ;;
    esac
}

install_configure() {
    local package=$1
    local configure_builder="$2"
    local tool_options="$3"
    local source_directory="$4"
    local build_directory="$5"
    if [[ $INSTALL_COMMAND == "install" ]]; then
        print_status $package "INFO" "Configuring"
        if [[ $build_directory != "" ]]; then
            mkdir -p "$build_directory"
            cd "$build_directory"
        else
            cd "$source_directory"
        fi
        configure_options="--prefix=$INSTALL_PREFIX ${tool_options}"
        if [[ -f "${source_directory}/configure" ]]; then
            eval "${source_directory}/configure $configure_options"
        elif [[ -f "${source_directory}/Configure" ]]; then
            eval "${source_directory}/Configure $configure_options"
        elif [[ -f "${source_directory}/bootstrap" ]]; then
            eval "${source_directory}/bootstrap $configure_options"
        else
            cd "$source_directory"
            eval "${source_directory}/$configure_builder"
            cd "$build_directory"
            eval "${source_directory}/configure $configure_options"
        fi
        print_status $package "INFO" "Building"
        make -j$CONCURRENT_JOBS
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
        print_status $package "INFO" "Installing"
        sudo_check
        sudo make install
    elif [[ $INSTALL_COMMAND == "remove" ]]; then
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
    fi
}

target_exists() {
    grep -E "^[a-zA-Z0-9_-]+:.*?" "Makefile" | grep -q "^$1:"
    return $?
}

install_make_only() {
    local package="$1"
    local custom_prefix="$2"
    local tool_options="$3"
    local source_directory="$4"
    if [[ $INSTALL_COMMAND == "install" ]]; then
        print_status $package "INFO" "Configuring"
        cd "$source_directory"
        if [[ -f "${source_directory}/makefile" ]]; then
            mv "${source_directory}/makefile" "${source_directory}/Makefile"
        fi
        if [[ -f "${source_directory}/Makefile" ]]; then
            print_status $package "WARN" "Patching"
            sed -i '' "s|/usr/local|${INSTALL_PREFIX}${custom_prefix}|g" "$source_directory/Makefile"
        fi
        print_status $package "INFO" "Building"
        make -j$CONCURRENT_JOBS $tool_options
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
        print_status $package "INFO" "Installing"
        if target_exists "install"; then
            sudo_check
            sudo make $tool_options install
        elif [[ $package == "lpeg" ]]; then
            sudo_check
            sudo cp -f ${source_directory}/lpeg.so $INSTALL_PREFIX/lib/lpeg.so
        else
            print_status $package "FAIL" "Not implemented"
        fi
    elif [[ $INSTALL_COMMAND == "remove" ]]; then
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
    fi
}

install_cmake() {
    local package="$1"
    local tool_options="$2"
    local source_directory="$3"
    local build_directory="$4"

    if [[ $INSTALL_COMMAND == "install" ]]; then
        print_status $package "INFO" "Configuring"
        mkdir -p "$build_directory"
        cd "$build_directory"
        cmake_options="-Wno-dev -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -DCMAKE_INSTALL_RPATH=$INSTALL_PREFIX/lib -DCMAKE_BUILD_TYPE=Release ${tool_options}"
        if [[ $package != "ninja" ]]; then
            cmake_options="-GNinja $cmake_options"
        fi
        eval "cmake $cmake_options \"$source_directory\""
        print_status $package "INFO" "Building"
        cmake --build . --parallel=$CONCURRENT_JOBS
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
        print_status $package "INFO" "Installing"
        if [[ $package != "llvm-bootstrap" ]]; then
            sudo_check
            sudo cmake --install .
        fi
    elif [[ $INSTALL_COMMAND == "remove" ]]; then
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
    fi
}

install_prebuilt() {
    local package="$1"
    local prebuilt_installer="$2"
    local installer_options="$3"
    local source_directory="$4"

    if [[ $INSTALL_COMMAND == "install" ]]; then
        if [[ $prebuilt_installer != "" ]]; then
            uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
            print_status $package "INFO" "Installing"
            sudo "${source_directory}/${prebuilt_installer}" "$installer_options"
        else
            print_status $package "FAIL" "Not implemented"
        fi
    elif [[ $INSTALL_COMMAND == "remove" ]]; then
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
    fi
}

install_pip() {
    local package="$1"
    if [[ $INSTALL_COMMAND == "install" ]]; then
        print_status $package "INFO" "Installing"
        sudo_check
        # to compile instead of prebuilt, pip3 install --no-binary :all: --upgrade "$package"
        sudo $SCRIPT_PYTHONPATH/pip3 install --no-binary :all: --upgrade "$package"
        # sudo $SCRIPT_PYTHONPATH/pip3 install --upgrade "$package"
    elif [[ $INSTALL_COMMAND == "remove" ]]; then
        print_status $package "WARN" "Uninstalling"
        sudo_check
        sudo $SCRIPT_PYTHONPATH/pip3 uninstall "$package"
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
    fi
}

install_luarocks() {
    local package="$1"
    if [[ $INSTALL_COMMAND == "install" ]]; then
        print_status $package "INFO" "Installing"
        sudo_check
        sudo /usr/local/bin/luarocks install "$package"
    elif [[ $INSTALL_COMMAND == "remove" ]]; then
        print_status $package "WARN" "Uninstalling"
        sudo_check
        sudo /usr/local/bin/luarocks uninstall "$package"
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
    fi
}

install_cargo() {
    local package="$1"
    local source_path="$2"
    local tool_options="$3"
    local source_directory="$4"
    local build_directory="$5"
    if [[ $INSTALL_COMMAND == "install" ]]; then
        print_status $package "INFO" "Configuring"
        mkdir -p "$build_directory"
        cd "$build_directory"
        print_status $package "INFO" "Building"
        cargo build --release --manifest-path "$source_directory/Cargo.toml"
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
        print_status $package "INFO" "Installing"
        sudo_check
        sudo cargo install --path "$source_directory$source_path" --root $INSTALL_PREFIX
        if [[ $package == "helix" ]]; then
            rm -rf "$source_directory/runtime/grammars/sources/"
            sudo_check
            sudo cp -rPf $source_directory/runtime $INSTALL_PREFIX/libexec/helix/
        fi
    elif [[ $INSTALL_COMMAND == "remove" ]]; then
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
    fi
}

install_package() {
    local package=$1
    local skip_time=$SKIPTIME
    # package-name, kind, alternative/alt-options, config-options, source-directory, download-command, url, filename/branch, etag (https), strip (https-extract)
    local source_directory="${SOURCES_DIRECTORY}/${package}${5}"
    local build_directory="${BUILDS_DIRECTORY}/${package}"

    if [[ -f "$MANIFEST_DIRECTORY/${package}.pre-manifest" ]]; then
        print_status $package "WARN" "Previously incomplete"
        rm "$MANIFEST_DIRECTORY/${package}.pre-manifest"
        skip_time="1"
    fi

    if [[ $INSTALL_COMMAND == "remove" ]]; then
        skip_time="1"
    fi

    print_status $package "INFO" "Preparing"
    spinner on

    local last_completion=0
    if [[ -f "$MANIFEST_DIRECTORY/${package}.manifest" ]]; then
        last_completion=$(stat -f "%Dm" -t %s "$MANIFEST_DIRECTORY/${package}.manifest")
    fi

    if (( $(( $(date +%s) - last_completion )) > $skip_time )); then
        find "$INSTALL_PREFIX" -type f | sort > "$MANIFEST_DIRECTORY/${package}.pre-manifest"
        download "$package" "$6" "$7" "$8" "$9" "$10"
        pre_patch "$package" "$source_directory"
        sudo_check
        if [[ -d "$build_directory" ]]; then sudo rm -rf $build_directory; fi
        case "$2" in
            configure)
                install_configure "$package" "$3" "$4" "$source_directory" "$build_directory"
                ;;
            configure_in_source)
                install_configure "$package" "$3" "$4" "$source_directory" ""
                ;;
            make_only)
                install_make_only "$package" "$3" "$4" "$source_directory"
                ;;
            cmake)
                install_cmake "$package" "$4" "$source_directory" "$build_directory"
                ;;
            meson)
                ;;
            pip)
                install_pip "$package"
                ;;
            cargo)
                install_cargo "$package" "$3" "$4" "$source_directory" "$build_directory"
                ;;
            swift)
                ;;
            npm)
                ;;
            luarocks)
                install_luarocks "$package"
                ;;
            scons)
                ;;
            prebuilt)
                install_prebuilt "$package" "$3" "$4" "$source_directory"
                ;;
        esac
        if [[ $INSTALL_COMMAND != "remove" ]]; then
            print_status $package "INFO" "Manifesting"
            find "$INSTALL_PREFIX" -type f | sort > "$MANIFEST_DIRECTORY/$package.post-manifest"
            comm -13 "$MANIFEST_DIRECTORY/$package.pre-manifest" "$MANIFEST_DIRECTORY/$package.post-manifest" >> "$MANIFEST_DIRECTORY/$package.manifest"
            rm "$MANIFEST_DIRECTORY/$package.pre-manifest" "$MANIFEST_DIRECTORY/$package.post-manifest"
        else
            rm "$MANIFEST_DIRECTORY/${package}.pre-manifest"
        fi
    else
        print_status $package "WARN" "Skipping"
    fi

    post_patch "$package"

    spinner off
    print_status $package "DONE" "Completed"
}

install_certs() {
    local package="certs"
    local source_directory="${SOURCES_DIRECTORY}"
    print_status $package "INFO" "Preparing"
    spinner on
    if [[ $INSTALL_COMMAND == "remove" ]]; then
        uninstall_manifested $package "$MANIFEST_DIRECTORY/${package}.manifest"
    elif [[ -f "$INSTALL_ROOT_CERTS" ]]; then
        print_status $package "WARN" "Skipping"
    elif [[ $INSTALL_COMMAND == "install" ]]; then
        /usr/bin/security export -k /System/Library/Keychains/SystemRootCertificates.keychain -t certs -p  > "$source_directory/keychain_root_certs.pem"
        print_status $package "INFO" "Installing"
        find "$INSTALL_PREFIX" -type f | sort > "$MANIFEST_DIRECTORY/${package}.pre-manifest"
        sudo_check
        sudo mkdir -p "$INSTALL_CERTS_DIRECTORY"
        sudo cp "$source_directory/keychain_root_certs.pem" "$INSTALL_ROOT_CERTS"
        print_status $package "INFO" "Manifesting"
        find "$INSTALL_PREFIX" -type f | sort > "$MANIFEST_DIRECTORY/$package.post-manifest"
        comm -13 "$MANIFEST_DIRECTORY/$package.pre-manifest" "$MANIFEST_DIRECTORY/$package.post-manifest" >> "$MANIFEST_DIRECTORY/$package.manifest"
        rm "$MANIFEST_DIRECTORY/$package.pre-manifest" "$MANIFEST_DIRECTORY/$package.post-manifest"
    fi
    spinner off
    print_status $package "DONE" "Completed"
}

# Custom patches and symlinks etc

# after download, before install
pre_patch() {
    if [[ $INSTALL_COMMAND == "install" ]]; then
        case "$1" in
            curl)
                print_status $package "INFO" "Patching"
                sed -i '' "s|\[unreleased\]|$(date '+%Y-%m-%d') \(No release\)|g" "${2}/include/curl/curlver.h"
                ;;
            lpeg)
                print_status $package "INFO" "Patching"
                sed -i '' "s|-bundle|-dynamiclib|g" "${2}/makefile"
                ;;
        esac
    elif [[ $INSTALL_COMMAND == "remove" ]]; then
        case "$1" in
            curl)
                ;;
        esac
    fi
}

# after install
post_patch() {
    sudo_check
    if [[ $INSTALL_COMMAND == "install" ]]; then
        case "$1" in
            pkgconf)
                print_status $package "INFO" "Sym-linking"
                sudo ln -sf $INSTALL_PREFIX/bin/pkgconf $INSTALL_PREFIX/bin/pkg-config
                sudo ln -sf $INSTALL_PREFIX/share/man/man1/pkgconf $INSTALL_PREFIX/share/man/man1/pkg-config.1
                ;;
            lpeg)
                print_status $package "INFO" "Sym-linking"
                sudo ln -sf $INSTALL_PREFIX/lib/lpeg.so $INSTALL_PREFIX/lib/liblpeg.dylib
                ;;
        esac
    elif [[ $INSTALL_COMMAND == "remove" ]]; then
        case "$1" in
            pkgconf)
                print_status $package "INFO" "Remove symlinks"
                sudo rm -f $INSTALL_PREFIX/bin/pkg-config
                sudo rm -f $INSTALL_PREFIX/share/man/man1/pkg-config.1
                ;;
            lpeg)
            print_status $package "INFO" "Remove symlinks"
                sudo rm -f $INSTALL_PREFIX/lib/liblpeg.dylib
                ;;
        esac
    fi
}

# Main
# ==============================================================================
main() {
    setup "$@"
    if [[ $INSTALL_COMMAND == "print" ]]; then
        print_status "TODO" "INFO" "Printing"
    elif [[ $INSTALL_COMMAND == "remove" ]] && [[ $INSTALL_SINGLE_TOOL != "" ]]; then
        spinner on
        uninstall_manifested $INSTALL_SINGLE_TOOL "$MANIFEST_DIRECTORY/${INSTALL_SINGLE_TOOL}.manifest"
        spinner off
    else
        sudo_check
        # TODO use external file (csv or similar for all packages)
        # 1-package 2-kind 3-alternative 4-options 5-source_location 6-download_kind 7-url 8-filename/branchname 9-use_etag 10-strip_extract
        # m4 (builtin old) -
        install_package "m4" "configure" "" "" "" "https" "https://ftp.gnu.org/gnu/m4/" "m4-latest.tar.xz" "YES" "YES"
        # bison (versioned) - m4
        install_package "bison" "configure" "" "" "" "https" "https://ftp.gnu.org/gnu/bison/" "bison-3.8.2.tar.xz" "YES" "YES"
        # libtool (versioned, builtin different) - m4
        install_package "gnulibtool" "configure" "" "--program-prefix=gnu --enable-ltdl-install" "" "https" "https://ftp.gnu.org/gnu/libtool/" "libtool-2.5.4.tar.xz" "YES" "YES"
        export LIBTOOLIZE="gnulibtoolize"
        # autoconf - m4, perl (builtin)
        install_package "autoconf" "configure" "" "" "" "https" "https://ftp.gnu.org/gnu/autoconf/" "autoconf-latest.tar.xz" "YES" "YES"
        # automake (versioned) - autoconf
        install_package "automake" "configure" "" "" "" "https" "https://ftp.gnu.org/gnu/automake/" "automake-1.17.tar.xz" "YES" "YES"
        # pkgconf - (autoconf, automake, libtool) or meson
        install_package "pkgconf" "configure" "./autogen.sh" "--with-system-libdir=/usr/lib:${SDK_PATH}/usr/lib --with-system-includedir=/usr/include:${SDK_PATH}/usr/include" "" "git" "https://github.com/pkgconf/pkgconf.git" "master" "YES" "YES"
        # gdbm -
        install_package "gdbm" "configure" "" "--enable-libgdbm-compat --without-readline" "" "https" "https://ftp.gnu.org/gnu/gdbm/" "gdbm-latest.tar.gz" "YES" "YES"
        # cmake - bz2 (builtin), zlib (builtin), curl (builtin), ncurses (builtin), sphinx (defer)
        install_package "cmake" "configure" "./bootstrap" "--parallel=$CONCURRENT_JOBS --system-zlib --system-bzip2 --system-curl -- -DCMake_BUILD_LTO=ON -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release -Wno-dev" "" "git" "https://github.com/Kitware/CMake.git" "master" "YES" "YES"
        # ninja - python (builtin), cmake
        install_package "ninja" "cmake" "" "-DBUILD_TESTING=OFF" "" "git" "https://github.com/ninja-build/ninja.git" "release" "YES" "YES"
        # libtommath - cmake, libtool
        install_package "libtommath" "cmake" "" "" "" "git" "https://github.com/libtom/libtommath.git" "develop" "YES" "YES"
        # pcre2 - python (builtin), zlib (builtin), pcre2
        install_package "pcre2" "cmake" "" "" "" "git" "https://github.com/PCRE2Project/pcre2.git" "master" "YES" "YES"
        # swig - python (builtin), zlib (builtin), pcre2, bison
        install_package "swig" "cmake" "" "-DPCRE2_INCLUDE_DIRS=\"$INSTALL_PREFIX/include\"" "" "git" "https://github.com/swig/swig.git" "master" "YES" "YES"
        # xz - cmake, gettext (defer)
        install_package "xz" "cmake" "" "" "" "git" "https://github.com/tukaani-project/xz.git" "master" "YES" "YES"
        # z3 - cmake, python (builtin), gmp (defer)
        install_package "z3" "cmake" "" "" "" "git" "https://github.com/Z3Prover/z3.git" "master" "YES" "YES"
        # lz4 -
        install_package "lz4" "make_only" "" "" "" "git" "https://github.com/lz4/lz4.git" "dev" "YES" "YES"
        # zstd - cmake, lz4, xz, zlib (builtin)
        install_package "zstd" "make_only" "" "" "" "git" "https://github.com/facebook/zstd.git" "dev" "YES" "YES"
        # llvm-bootstrap
        install_package "llvm-bootstrap" \
                        "cmake" "" \
                        " \
                            -DDEFAULT_SYSROOT=\"${SDK_PATH}\" \
                            -DLLVM_ENABLE_PROJECTS=\"clang;lld\" \
                            -DLLVM_ENABLE_RUNTIMES=\"libcxx;libcxxabi;libunwind\" \
                            -DLLVM_TARGETS_TO_BUILD=Native \
                        " \
                        "/llvm" \
                        "git" "https://github.com/llvm/llvm-project.git" "main" \
                        "YES" "YES"
        # llvm-project - cmake, ninja, swig, xz, z3, zstd, python (builtin)
        install_package "llvm-project" \
                        "cmake" "" \
                        " \
                            -DDEFAULT_SYSROOT=\"${SDK_PATH}\" \
                            -DCMAKE_C_COMPILER=\"${BUILDS_DIRECTORY}/llvm-bootstrap/bin/clang\" \
                            -DCMAKE_CXX_COMPILER=\"${BUILDS_DIRECTORY}/llvm-bootstrap/bin/clang++\" \
                            -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
                            -DLLVM_LOCAL_RPATH=\"$INSTALL_PREFIX/lib\" \
                            -DLLVM_USE_LINKER=\"${BUILDS_DIRECTORY}/llvm-bootstrap/bin/ld64.lld\" \
                            -DCMAKE_LIBTOOL=\"${BUILDS_DIRECTORY}/llvm-bootstrap/bin/llvm-libtool-darwin\" \
                            -DLLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra;mlir;polly;lld;lldb\" \
                            -DLLVM_ENABLE_RUNTIMES=\"libcxx;libcxxabi;libunwind;compiler-rt;pstl;openmp\" \
                            -DLLVM_PARALLEL_LINK_JOBS=1 \
                            -DLLVM_ENABLE_LTO=Thin \
                            -DLLVM_ENABLE_RTTI=ON \
                            -DLLVM_INCLUDE_TESTS=OFF \
                            -DLLVM_INSTALL_UTILS=ON \
                            -DLLVM_USE_RELATIVE_PATHS_IN_FILES=ON \
                            -DLLVM_TARGETS_TO_BUILD=Native \
                            -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=WebAssembly \
                            -DLLVM_CREATE_XCODE_TOOLCHAIN=OFF \
                            -DLLVM_ENABLE_Z3_SOLVER=ON \
                            -DLLDB_USE_SYSTEM_DEBUGSERVER=ON \
                            -DLLDB_ENABLE_PYTHON=ON \
                            -DLLDB_ENABLE_LZMA=ON \
                            -DLIBCXX_INSTALL_MODULES=ON \
                            -DLIBCXX_PSTL_BACKEND=libdispatch \
                            -DLIBCXXABI_ENABLE_SHARED=ON \
                            -DLLVM_ENABLE_FFI=ON \
                            -DFFI_INCLUDE_DIR=${SDK_PATH}/usr/include/ffi \
                            -DFFI_LIBRARY_DIR=${SDK_PATH}/usr/lib \
                        " \
                        "/llvm" \
                        "git" "https://github.com/llvm/llvm-project.git" "main" \
                        "YES" "YES"
        export CC="$INSTALL_PREFIX/bin/clang"
        export CXX="$INSTALL_PREFIX/bin/clang++"
        export LD="$INSTALL_PREFIX/bin/ld64.lld"
        export CFLAGS="-fuse-ld=$LD -Wl,rpath,$INSTALL_PREFIX/lib"
        export CXXFLAGS="-fuse-ld=$LD -Wl,rpath,$INSTALL_PREFIX/lib"
        export AR="$INSTALL_PREFIX/bin/llvm-ar"
        export AS="$INSTALL_PREFIX/bin/llvm-as"
        export RANLIB="$INSTALL_PREFIX/bin/llvm-ranlib"
        # brotli - cmake
        install_package "brotli" "cmake" "" "" "" "git" "https://github.com/google/brotli.git" "master" "YES" "YES"
        # acquire certs
        install_certs
        # openssl - brotli, certs
        install_package "openssl" "configure" "" "--openssldir=$INSTALL_PREFIX/etc/ssl darwin64-arm64-cc enable-ec_nistp_64_gcc_128" "" "git" "https://github.com/openssl/openssl.git" "master" "YES" "YES"
        # nghttp2 - cmake
        install_package "nghttp2" "cmake" "" "" "" "git" "https://github.com/nghttp2/nghttp2.git" "master" "YES" "YES"
        # nghttp3 - cmake
        install_package "nghttp3" "cmake" "" "" "" "git" "https://github.com/ngtcp2/nghttp3.git" "main" "YES" "YES"
        # libssh2 - cmake, openssl, zlib
        install_package "libssh2" "cmake" "" "" "" "git" "https://github.com/libssh2/libssh2.git" "master" "YES" "YES"
        # rtmpdump - openssl, zlib
        install_package "rtmpdump" "make_only" "" "SYS=darwin" "" "git" "https://git.ffmpeg.org/rtmpdump.git" "master" "YES" "YES"
        # curl - pkgconf, brotli, nghttp2, nghttp3, psl (deferred), libssh2, openssl, rtmpdump, zstd, krb5 (mac), openldap (mac), zlib (mac)
        # We cannot use Secure Transport with QUIC and HTTP/3, and it is also deprecated
        install_package "curl" \
                        "cmake" "" \
                        " \
                            -DCURL_USE_OPENSSL=ON \
                            -DUSE_OPENSSL_QUIC=ON \
                            -DCURL_USE_LIBPSL=OFF \
                            -DCURL_USE_GSSAPI=ON \
                            -DUSE_APPLE_IDN=ON \
                            -DCMAKE_C_COMPILER=$CC \
                            -DLLVM_USE_LINKER=$LD \
                        " \
                        "" "git" "https://github.com/curl/curl.git" "master" "YES" "YES"
        # tcl (versioned) - openssl, libtommath
        install_package "tcl" "configure" "" "" "/macosx" "https" "http://prdownloads.sourceforge.net/tcl/" "tcl9.0.1-src.tar.gz" "YES" "YES"
        # tk (versioned) - tcl
        install_package "tk" "configure" "" "--with-tcl=${BUILDS_DIRECTORY}/tcl --enable-aqua=yes" "/macosx" "https" "http://prdownloads.sourceforge.net/tcl/" "tk9.0.1-src.tar.gz" "YES" "YES"
        # mpdecimal (versioned) -
        install_package "mpdecimal" "configure" "" "LD=$CC LDXX=$CXX LDXXFLAGS=$CFLAGS" "" "https" "https://www.bytereef.org/software/mpdecimal/releases/" "mpdecimal-4.0.0.tar.gz" "YES" "YES"
        # cpython - git (xcode), pkgconf, openssl, xz, gdbm, tcl-tk, mpdecimal
        # Will also install into /Library/Framework/Python.framework and /Applications/Python version
        install_package "cpython" "configure" "" "LDFLAGS_NODIST=\"-Wl,-rpath,$INSTALL_PREFIX/lib\" --enable-framework --enable-optimizations --with-lto --with-dbmliborder=ndbm --enable-ipv6 --with-system-expat --with-system-libmpdec" "" "git" "https://github.com/python/cpython.git" "main" "YES" "YES"
        export SCRIPT_PYTHONPATH="$INSTALL_PREFIX/bin"
        # pip (only upgrade) - cpython
        install_package "pip" "pip"
        # sphinx - pip
        install_package "sphinx" "pip"
        install_package "sphinx_rtd_theme" "pip"
        # utf8proc - cmake
        install_package "utf8proc" "cmake" "" "" "" "git" "https://github.com/JuliaStrings/utf8proc.git" "master" "YES" "YES"
        # libevent - cmake, openssl
        install_package "libevent" "cmake" "" "" "" "git" "https://github.com/libevent/libevent.git" "master" "YES" "YES"
        # tmux - autoconf, automake, libtool, pkgconf, libevent, ncurses, bison, utf8proc
        install_package "tmux" "configure" "./autogen.sh" "--enable-utf8proc CFLAGS=\"-Wl,-rpath,$INSTALL_PREFIX/lib\"" "" "git" "https://github.com/tmux/tmux.git" "master" "YES" "YES"
        # libunistring -
        export am_cv_func_iconv_works=yes
        install_package "libunistring" "configure" "" "" "" "https" "https://ftp.gnu.org/gnu/libunistring/" "libunistring-latest.tar.xz" "YES" "YES"
        # gettext (versioned) - libunistring, libxml2 (mac), ncurses (mac)
        install_package "gettext" "configure" "" "--disable-csharp --with-included-gettext --with-included-glib --with-included-libcroco --with-emacs" "" "https" "https://ftp.gnu.org/gnu/gettext/" "gettext-0.23.1.tar.xz" "YES" "YES"
        # neovim - cmake, internal dependencies built
        install_package "neovim" "make_only" "" "CMAKE_C_FLAGS=\"-fuse-ld=$LD\" CMAKE_BUILD_TYPE=Release CMAKE_INSTALL_PREFIX=$INSTALL_PREFIX" "" "git" "https://github.com/neovim/neovim.git" "master" "YES" "YES"
        # rust (beta)
        install_package "rust-beta" "prebuilt" "./install.sh" "--prefix=$INSTALL_PREFIX" "" "https" "https://static.rust-lang.org/dist/" "rust-beta-aarch64-apple-darwin.tar.xz" "YES" "YES"
        # helix - rust
        export HELIX_DEFAULT_RUNTIME=$INSTALL_PREFIX/libexec/helix/runtime
        install_package "helix" "cargo" "/helix-term" "" "" "git" "https://github.com/helix-editor/helix.git" "master" "YES" "YES"

    fi

    # Clean up empty directories left behind in install-prefix
    if [[ $INSTALL_COMMAND == "remove" ]]; then
        print_status "remove" "INFO" "Final cleanup"
        sudo_check
        sudo find "$INSTALL_PREFIX" -mindepth 2 -type d -empty -depth -exec rm -rf {} +
    fi
    print_status "Script $INSTALL_COMMAND" "DONE" "Completed"
    print "\033[4;1H\033[?25h\n" > /dev/tty
}

main "$@"
